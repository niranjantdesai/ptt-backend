openapi: 3.0.0
info:
  title: Pomodoro time tracker RESTful API
  description: A RESTful API for the Pomodoro Time Tracker application (CS 6301 project)
  termsOfService: TBD
  contact:
    name: Alex Orso
    email: orso@cc.gatech.edu
  version: 1.0.4
servers:
- url: https://gazelle.cc.gatech.edu:8081/ptt
  description: 'Backend server #1'
- url: https://gazelle.cc.gatech.edu:8082/ptt
  description: 'Backend server #2'
- url: https://gazelle.cc.gatech.edu:8083/ptt
  description: 'Backend server #3'
- url: https://gazelle.cc.gatech.edu:8084/ptt
  description: 'Backend server #4'
paths:
  /users:
    get:
      tags:
      - users
      description: Return all users
      operationId: getUsers
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        500:
          description: Server error
    post:
      tags:
      - users
      description: Add a new user and return the newly created object
      operationId: addUser
      requestBody:
        description: User object to be added (the ID field is irrelevant, as it will be generated by the server and returned, and should be left empty for clarity)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        201:
          description: Successful creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request
        409:
          description: Resource conflict
        500:
          description: Server error
  /users/{userId}:
    get:
      tags:
      - users
      description: Get user by ID
      operationId: getUser
      parameters:
      - name: userId
        in: path
        description: ID of the user for which the request is being submitted
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request
        404:
          description: User not found
        500:
          description: Server error
    put:
      tags:
      - users
      description: Update a user and return the updated object
      operationId: updateUser
      parameters:
      - name: userId
        in: path
        description: ID of the user for which the request is being submitted
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: Updated user object (the ID field is irrelevant and should be left empty for clarity)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request
        404:
          description: User not found
        500:
          description: Server error
    delete:
      tags:
      - users
      description: Delete a user and return the deleted object
      operationId: deleteUser
      parameters:
      - name: userId
        in: path
        description: ID of the user for which the request is being submitted
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request
        404:
          description: User not found
        500:
          description: Server error
  /users/{userId}/projects:
    get:
      tags:
      - projects
      description: Return all projects for a given user
      operationId: getProjects
      parameters:
      - name: userId
        in: path
        description: ID of user who owns the projects
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        400:
          description: Bad request
        404:
          description: User not found
        500:
          description: Server error
    post:
      tags:
      - projects
      description: Add a new project and return the newly created object
      operationId: addProject
      parameters:
      - name: userId
        in: path
        description: ID of user who owns the projects
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: Project object to be added (the ID field is irrelevant, as it will be generated by the server and returned, and should be left empty for clarity)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
        required: true
      responses:
        201:
          description: Successful creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        400:
          description: Bad request
        404:
          description: User not found
        409:
          description: Resource conflict
        500:
          description: Server error
  /users/{userId}/projects/{projectId}:
    get:
      tags:
      - projects
      description: Get project by ID for a given user
      operationId: getProject
      parameters:
      - name: userId
        in: path
        description: ID of user who owns the projects
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: projectId
        in: path
        description: ID of the project for which the request is being submitted
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        400:
          description: Bad request
        404:
          description: User or project not found
        500:
          description: Server error
    put:
      tags:
      - projects
      description: Update a project and return the updated object
      operationId: updateProject
      parameters:
      - name: userId
        in: path
        description: ID of user who owns the projects
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: projectId
        in: path
        description: ID of the project for which the request is being submitted
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: Updated project object (the ID field is irrelevant and should be left empty for clarity)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        400:
          description: Bad request
        404:
          description: User or project not found
        409:
          description: Resource conflict
        500:
          description: Server error
    delete:
      tags:
      - projects
      description: Delete a project and return the deleted object
      operationId: deleteProject
      parameters:
      - name: userId
        in: path
        description: ID of user who owns the projects
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: projectId
        in: path
        description: ID of the project for which the request is being submitted
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        400:
          description: Bad request
        404:
          description: User or project not found
        500:
          description: Server error
  /users/{userId}/projects/{projectId}/sessions:
    post:
      tags:
      - sessions
      description: Add a new session and return the newly created object
      operationId: addSession
      parameters:
      - name: userId
        in: path
        description: ID of user who owns the projects
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: projectId
        in: path
        description: ID of project to which the sessions belong
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: Session object to be added (the ID field is irrelevant, as it will be generated by the server and returned, and should be left empty for clarity)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Session'
        required: true
      responses:
        201:
          description: Successful creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        400:
          description: Bad request
        404:
          description: User or project not found
        500:
          description: Server error
  /users/{userId}/projects/{projectId}/sessions/{sessionId}:
    put:
      tags:
      - sessions
      description: Update session and return the updated object
      operationId: updateSession
      parameters:
      - name: userId
        in: path
        description: ID of user who owns the projects
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: projectId
        in: path
        description: ID of project to which the sessions belong
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: sessionId
        in: path
        description: ID of the session for which the request is being submitted
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: Updated session object (the ID field is irrelevant and should be left empty for clarity)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Session'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        400:
          description: Bad request
        404:
          description: User, project, or session not found
        500:
          description: Server error
  /users/{userId}/projects/{projectId}/report:
    get:
      tags:
      - reports
      description: Get a (newly generated) report for a given user and project
      operationId: getReport
      parameters:
      - name: userId
        in: path
        description: ID of user who owns the projects
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: projectId
        in: path
        description: ID of project for which the report must be returned
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: from
        in: query
        description: Starting time for the report
        required: true
        style: form
        explode: true
        schema:
          type: string
          format: ISO-8601
          example: 2019-02-18T20:00Z (see http://apiux.com/2013/03/20/5-laws-api-dates-and-times/)
      - name: to
        in: query
        description: Ending time for the report
        required: true
        style: form
        explode: true
        schema:
          type: string
          format: ISO-8601
          example: 2019-02-18T20:00Z (see http://apiux.com/2013/03/20/5-laws-api-dates-and-times/)
      - name: includeCompletedPomodoros
        in: query
        description: If specified, the report will also include the number of completed Pomodoros per session
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: includeTotalHoursWorkedOnProject
        in: query
        description: If specified, the report will also include the total number of hours worked on the project
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        400:
          description: Bad request
        404:
          description: User or project not found
        500:
          description: Server error
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
    Project:
      type: object
      properties:
        id:
          type: integer
          format: int64
        projectname:
          type: string
        userId:
          type: integer
          format: int64
    Session:
      type: object
      properties:
        id:
          type: integer
          format: int64
        startTime:
          type: string
          format: ISO-8601
          example: 2019-02-18T20:00Z (see http://apiux.com/2013/03/20/5-laws-api-dates-and-times/)
        endTime:
          type: string
          format: ISO-8601
          example: 2019-02-18T20:00Z (see http://apiux.com/2013/03/20/5-laws-api-dates-and-times/)
        counter:
          type: integer
          format: int64
    Report:
      type: object
      properties:
        sessions:
          type: array
          items:
            $ref: '#/components/schemas/Report_sessions'
        completedPomodoros:
          type: integer
          format: int16
        totalHoursWorkedOnProject:
          type: number
          format: double (two decimal places)
    Report_sessions:
      type: object
      properties:
        startingTime:
          type: string
          format: ISO-8601
          example: 2019-02-18T20:00Z (see http://apiux.com/2013/03/20/5-laws-api-dates-and-times/)
        endingTime:
          type: string
          format: ISO-8601
          example: 2019-02-18T20:00Z (see http://apiux.com/2013/03/20/5-laws-api-dates-and-times/)
        hoursWorked:
          type: number
          format: double (two decimal places)
