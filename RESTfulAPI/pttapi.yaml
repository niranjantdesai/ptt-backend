swagger: '2.0'
info:
  description: 'Deliverable 1: RESTful API'
  version: 1.0.0
  title: Pomodoro Time Tracker
host: 'localhost:8080'
basePath: /
tags:
  - name: admin
    description: Operations by an admin
  - name: user
    description: Operations by a user
schemes:
  - https
  - http
paths:
  '/api/admin/':
    post:
      tags:
        - admin
      summary: "Add a new user"
      description: >-
        The service will add a new user and return the new user.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          description: 'User body'
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid input
        '409':
          description: User already exists
  
  '/api/admin/{email}':
    parameters:
      - name: email
        in: path
        description: 'email of the user that needs to be accessed'
        required: true
        type: string
    put:
      tags:
        - admin
      summary: 'Update an existing user by email'
      description: 'The service will update a user and return the updated user'
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          description: 'Update to the user'
          required: true
          schema:
            $ref: '#/definitions/UserUpdateBody'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid input
        '404':
          description: Not found
    delete:
      tags:
        - admin
      summary: 'Delete an existing user by email'
      description: 'The service will delete a user and return the deleted user'
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        '400':
          description: Invalid input
        '404':
          description: Not found
  
  '/api/user/project/login/{email}':
    parameters:
      - name: email
        in: path
        description: 'email of the user that needs to be verified if exists in the database'
        required: true
        type: string
    get:
      tags:
        - user
      summary: Verify if a user with this email exists in the system
      description: >-
        The service will return a boolean indicating whether a user with this
        email exists in the system or not
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/LoginResponse'
        '400':
          description: Invalid input
  
  '/api/user/project/{email}':
    parameters:
      - name: email
        in: path
        description: 'email of the user that needs to be updated'
        required: true
        type: string
    get:
      tags:
        - user
      summary: 'Get the list of projects of a user'
      description: 'The service will return the list of projects of a user'
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
        '400':
          description: Invalid input
        '404':
          description: Not found
  
  '/api/user/project/{email}/{projectName}':
    parameters:
      - name: email
        in: path
        description: email of the user
        required: true
        type: string
      - name: projectName
        in: path
        description: "name of the user's project for which session info needs to be returned"
        required: true
        type: string
    get:
      tags:
        - user
      summary: "Get the sessions of a project of a user"
      description: "The service will return the list of sessions of the given project of a user"
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Session'
        '400':
          description: Invalid input
        '404':
          description: Not found
  
  '/api/user/project/create/{email}/{projectName}':
    parameters:
      - name: email
        in: path
        description: email of the user
        required: true
        type: string
      - name: projectName
        in: path
        description: "name of the user's project that needs to be created"
        required: true
        type: string
    post:
      tags:
        - user
      summary: "Create a user's project"
      description: "The service will create a new project for a user and return it."
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/Project'
        '400':
          description: Invalid input
        '409':
          description: Project already exists
  
  '/api/user/project/delete/{email}/{projectName}':
    parameters:
      - name: email
        in: path
        description: "email of the user"
        required: true
        type: string
      - name: projectName
        in: path
        description: "name of the user's project that needs to be deleted"
        required: true
        type: string
    delete:
      tags:
        - user
      summary: "Delete a user's project"
      description: >-
        The service will delete a project for a user and return the deleted
        project.
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Project'
        '400':
          description: Invalid input
        '404':
          description: Not found
  
  '/api/user/project/associate/{email}/{projectName}':
    parameters:
      - name: email
        in: path
        description: "email of the user"
        required: true
        type: string
      - name: projectName
        in: path
        description: "name of the user's project that needs to be updated"
        required: true
        type: string
    put:
      tags:
        - user
      summary: "Associate a Pomodoro with a user’s project"
      description: >-
        The service will associate a Pomodoro with user's project, and start a
        new session.
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Session'
        '400':
          description: Invalid input
        '404':
          description: Not found
  
  '/api/user/project/increment/{email}/{projectName}':
    parameters:
      - name: email
        in: path
        description: "email of the user"
        required: true
        type: string
      - name: projectName
        in: path
        description: "name of the user's project that needs to be updated"
        required: true
        type: string
    put:
      tags:
        - user
      summary: "Increment the Pomodoro counter for a user's project"
      description: >-
        The service will increment the Pomodoro counter by one for the latest
        session of the user's project.
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Session'
        '400':
          description: Invalid input
        '404':
          description: Not found
  
  '/api/user/project/done/{email}/{projectName}':
    parameters:
      - name: email
        in: path
        description: "email of the user"
        required: true
        type: string
      - name: projectName
        in: path
        description: "name of the user's project who session needs to be updated"
        required: true
        type: string
    put:
      tags:
        - user
      summary: "Completing a session of the user's project"
      description: >-
        The service will update the current session which the user is working
        on.
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Session'
        '400':
          description: Invalid input
        '404':
          description: Not found
  
  '/api/user/project/stop/{email}/{projectName}':
    parameters:
      - name: email
        in: path
        description: "email of the user"
        required: true
        type: string
      - name: projectName
        in: path
        description: "name of the user's project who session needs to be updated"
        required: true
        type: string
    put:
      tags:
        - user
      summary: "Stopping a pomodoro for a user’s project"
      description: >-
        The service will stop the ongoing session, and log the number of
        Pomodoros completed in the session and the end time of the last
        Pomodoro.
      parameters:
        - name: body
          in: body
          description: >-
            If true, the end time of the last Pomodoro is logged. Otherwise, the
            end time of the last completed Pomodoro is logged.
          required: true
          schema:
            $ref: '#/definitions/Boolean'
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Session'
        '400':
          description: Invalid input
        '404':
          description: Not found
  
  '/api/user/project/report/{email}/{projectName}/':
    parameters:
      - name: email
        in: path
        description: "email of the user"
        required: true
        type: string
      
      - name: projectName
        in: path
        description: "name of the user's project for which the report needs to be generated"
        required: true
        type: string
      
      - name: startTime
        in: query
        description: "start time of the timeframe for which the report needs to be generated"
        required: true
        type: string
      
      - name: endTime
        in: query
        description: "end time of the timeframe for which the report needs to be generated"
        required: true
        type: string
      
      - name: options
        in: query
        description: "additional options or constraints"
        required: false
        type: string
    get:
      tags:
        - user
      summary: "Generating a report for a user's project for a specific timeframe"
      description: >-
        The service will return all the sessions for a user's project in a specific
        timeframe and with respect to any options.
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Report'
        '400':
          description: Invalid input
        '404':
          description: Not found

definitions:
  User:
    type: object
    required:
      - firstname
      - lastname
      - email
    properties:
      firstname:
        type: string
      lastname:
        type: string
      email:
        type: string
  UserUpdateBody:
    type: object
    properties:
      firstname:
        type: string
      lastname:
        type: string
  Project:
    type: object
    properties:
      name:
        type: string
      sessions:
        type: array
        items:
          $ref: '#/definitions/Session'
  Report:
    type: object
    required:
      - sessions
    properties:
      sessions:
        type: array
        items:
          $ref: '#/definitions/Session'
      numPomodoros:
        type: integer
      numHours:
        type: number
  Session:
    type: object
    properties:
      starttime:
        type: number
      endtime:
        type: number
      pomodorocounter:
        type: integer
  Boolean:
    type: object
    properties:
      partial:
        type: boolean
  LoginResponse:
    type: object
    properties:
      exists:
        type: boolean


