swagger: '2.0'
info:
  description: "Deliverable 1: RESTful API"
  version: 1.0.0
  title: "Pomodoro Time Tracker"
host: 'localhost:8080'
basePath: /
tags:
  - name: admin
    description: 'Operations by an admin'
  - name: user
    description: 'Operations by a user'
schemes:
  - https
  - http
paths:
  '/api/admin/':
    post:
        tags:
          - admin
        summary: Admin will add a new user
        description: "The service will add a new user and also return the user added, in JSON format."
        consumes:
          - application/json
        produces:
          - application/json
        parameters:
          - name: body
            in: body
            description: User object that needs to be added to the addressbook. 
            required: true
            schema:
              $ref: '#/definitions/UserCreateBody'
        responses:
          '201':
            description: 'Success'
            schema:
              $ref: '#/definitions/User'
          '400':
            description: 'Invalid input'
  
  '/api/admin/{email}':
    parameters:
      - name: email
        in: path
        description: email of the user that needs to be updated
        required: true
        type: string
    put:
      tags:
        - admin
      summary: Update an existing user by email
      description: "The service will update a user and return the updated user"
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          description: Updated user
          required: true
          schema:
            $ref: '#/definitions/UserUpdateBody'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid input
        '404':
          description: Not found
    delete:
      tags:
        - admin
      summary: Delete an existing user by email
      description: 'The service will delete a user and return the deleted user'
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        '400':
          description: Invalid input
        '404':
          description: Not found

  '/api/user/project/{email}':
    parameters:
      - name: email
        in: path
        description: email of the user that needs to be updated
        required: true
        type: string
    get:
      tags:
        - user
      summary: Get the list of projects of a user
      description: 'The service will return the list of projects of a user'
      produces:
        - application/json
      responses:
        '200':
          description: Success
          schema:
            type: array
            items: 
              $ref: '#/definitions/Project'
        '400':
          description: Invalid input
        '404':
          description: Not found

  '/api/user/project/create/{email}/{projectName}/':
    parameters:
      - name: email
        in: path
        description: email of the user
        required: true
        type: string
      - name: projectName
        in: path
        description: name of the user's project that needs to be created
        required: true
        type: string
    post:
      tags:
        - user
      summary: User will create a project
      description: "The service will create a new project for a user and return it."
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '201':
          description: 'Success'
          schema:
            $ref: '#/definitions/Project'
        '400':
          description: 'Invalid input'


definitions:
  User:
    type: object
    required:
      - firstname
      - lastname
      - email
    properties:
      firstname:
        type: string
      lastname:
        type: string
      email:
        type: string
      projects:
        type: array
        items: 
            $ref: '#/definitions/Project'
  
  UserCreateBody:
    type: object
    required:
      - firstname
      - lastname
      - email
    properties:
      firstname:
        type: string
      lastname:
        type: string
      email:
        type: string
  
  UserUpdateBody:
    type: object
    properties:
      firstname:
        type: string
      lastname:
        type: string
  
  Project:
    type: object
    properties:
      name:
        type: string
      sessions:
        type: array
        items: 
          $ref: '#/definitions/Session'
  
  Session:
    type: object
    properties:
      starttime:
        type: number
      endtime:
        type: number
      pomodorocounter:
        type: number
  
  Boolean:
    type: object
    properties:
      partial:
        type: boolean
